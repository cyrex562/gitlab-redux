include:
  - local: .gitlab/ci/qa-common/main.gitlab-ci.yml
  - local: .gitlab/ci/qa-common/rules.gitlab-ci.yml
  - local: .gitlab/ci/qa-common/variables.gitlab-ci.yml

workflow:
  rules:
    - when: always

.rules:test:gdk-load-balancer-changes:
  rules:
    - when: manual
      allow_failure: true
      changes:
        - ".gitlab/ci/test-on-gdk/**"
        - "lib/gitlab/database/load_balancing/**/*"

.rules:test:gdk-gitaly-version-change:
  rules:
    changes:
      - "GITALY_SERVER_VERSION"

.with-parallel:
  parallel: 15

.with-gdk-log:
  after_script:
    - mv $CI_BUILDS_DIR/*.log $CI_PROJECT_DIR/

.gdk-qa-base:
  extends:
    - .e2e-test-base
    # ignore runtime data from gdk because it's significantly slower than cng and runtime data for
    # optimizing parallel distribution should be geared towards test-on-cng
    - .with-ignored-runtime-data
  stage: test
  services:
    - name: docker:${DOCKER_VERSION}-dind
    - name: ${GDK_IMAGE}
      alias: gdk.test
      # CI setup will tail each component in to separate file
      # Override default command so we don't tail all of the logs to stdout unnecessarily
      command: [gdk, tail, rails-web]
  tags:
    - e2e
  variables:
    QA_DOCKER_NETWORK: host
    QA_GITLAB_URL: http://gdk.test:3000
    GITLAB_DEVELOPMENT_USE_PRECOMPILED_ASSETS: "true"
    GITLAB_QA_ADMIN_ACCESS_TOKEN: $QA_ADMIN_ACCESS_TOKEN
    RSPEC_LAST_RUN_RESULTS_FILE: "$CI_PROJECT_DIR/qa/tmp/examples.txt"
    COVERBAND_ENABLED: "$COVERBAND_ENABLED"  # explicitly define variable so it is passed in to gdk service container
    GITLAB_CRON_JOBS_POLL_INTERVAL: "0"
  after_script:
    - !reference [.with-gdk-log, after_script]
    - !reference [.gitlab-qa-report, after_script]
  artifacts:
    paths:
      - qa/tmp
      - ${CI_PROJECT_DIR}/*.log
    reports:
      junit: qa/tmp/rspec-*.xml
      dotenv: "$QA_SUITE_STATUS_ENV_FILE"
    expire_in: 7 days
    when: always

# ==========================================
# Test stage
# ==========================================

gdk-instance:
  extends:
    - .gdk-qa-base
    - .with-parallel
  variables:
    QA_SCENARIO: Test::Instance::All

gdk-instance-ff-inverse:
  extends: gdk-instance
  variables:
    QA_FEATURE_FLAGS: $FEATURE_FLAGS
  rules:
    - !reference [.rules:test:feature-flags-set, rules]

gdk-instance-gitaly-transactions:
  extends: gdk-instance
  variables:
    QA_GITALY_TRANSACTIONS_ENABLED: "true"
  rules:
    - !reference [.rules:test:never-schedule-pipeline, rules]
    - !reference [.rules:test:gdk-gitaly-version-change, rules]

# Take the existing GDK docker image and reconfigure it with Postgres load
# balancing. Adding 5s lag to 1 of the replicas to validate robustness of
# the load balancer.
gdk-instance-with-load-balancer:
  extends: gdk-instance
  variables:
    WITH_LOAD_BALANCER: "true"
  rules:
    - !reference [".rules:test:never-schedule-pipeline", rules]
    - !reference [".rules:test:gdk-load-balancer-changes", rules]

# ==========================================
# Post test stage
# ==========================================
e2e-test-report:
  extends: .rules:report:allure-report
  variables:
    ALLURE_REPORT_RESULTS_GLOB: "qa/tmp/allure-results"

upload-test-runtime-data:
  extends:
    - .upload-test-runtime-data
    - .rules:report:upload-test-runtime-data

export-test-metrics:
  extends:
    - .export-test-metrics
    - .rules:report:process-results

export-code-paths-mapping:
  extends:
    - .export-code-paths-mapping

notify-slack:
  extends:
    - .notify-slack
    - .rules:report:process-results
