use serde::{Deserialize, Serialize};

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct GroupParams {
    pub avatar: Option<String>,
    pub description: Option<String>,
    pub emails_disabled: Option<bool>,
    pub emails_enabled: Option<bool>,
    pub show_diff_preview_in_email: Option<bool>,
    pub mentions_disabled: Option<bool>,
    pub lfs_enabled: Option<bool>,
    pub name: Option<String>,
    pub path: Option<String>,
    pub public: Option<bool>,
    pub request_access_enabled: Option<bool>,
    pub share_with_group_lock: Option<bool>,
    pub visibility_level: Option<i32>,
    pub parent_id: Option<i64>,
    pub create_chat_team: Option<bool>,
    pub chat_team_name: Option<String>,
    pub require_two_factor_authentication: Option<bool>,
    pub two_factor_grace_period: Option<i32>,
    pub enabled_git_access_protocol: Option<String>,
    pub project_creation_level: Option<String>,
    pub subgroup_creation_level: Option<String>,
    pub default_branch_protection: Option<i32>,
    pub default_branch_protection_defaults: Option<BranchProtectionDefaults>,
    pub default_branch_name: Option<String>,
    pub allow_mfa_for_subgroups: Option<bool>,
    pub resource_access_token_creation_allowed: Option<bool>,
    pub resource_access_token_notify_inherited: Option<bool>,
    pub lock_resource_access_token_notify_inherited: Option<bool>,
    pub prevent_sharing_groups_outside_hierarchy: Option<bool>,
    pub setup_for_company: Option<bool>,
    pub jobs_to_be_done: Option<String>,
    pub crm_enabled: Option<bool>,
    pub crm_source_group_id: Option<i64>,
    pub force_pages_access_control: Option<bool>,
    pub enable_namespace_descendants_cache: Option<bool>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct BranchProtectionDefaults {
    pub allow_force_push: Option<bool>,
    pub developer_can_initial_push: Option<bool>,
    pub code_owner_approval_required: Option<bool>,
    pub allowed_to_merge: Option<AccessLevel>,
    pub allowed_to_push: Option<AccessLevel>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct AccessLevel {
    pub access_level: i32,
}

impl GroupParams {
    pub fn new() -> Self {
        Self {
            avatar: None,
            description: None,
            emails_disabled: None,
            emails_enabled: None,
            show_diff_preview_in_email: None,
            mentions_disabled: None,
            lfs_enabled: None,
            name: None,
            path: None,
            public: None,
            request_access_enabled: None,
            share_with_group_lock: None,
            visibility_level: None,
            parent_id: None,
            create_chat_team: None,
            chat_team_name: None,
            require_two_factor_authentication: None,
            two_factor_grace_period: None,
            enabled_git_access_protocol: None,
            project_creation_level: None,
            subgroup_creation_level: None,
            default_branch_protection: None,
            default_branch_protection_defaults: None,
            default_branch_name: None,
            allow_mfa_for_subgroups: None,
            resource_access_token_creation_allowed: None,
            resource_access_token_notify_inherited: None,
            lock_resource_access_token_notify_inherited: None,
            prevent_sharing_groups_outside_hierarchy: None,
            setup_for_company: None,
            jobs_to_be_done: None,
            crm_enabled: None,
            crm_source_group_id: None,
            force_pages_access_control: None,
            enable_namespace_descendants_cache: None,
        }
    }

    pub fn get_allowed_attributes() -> Vec<&'static str> {
        vec![
            "avatar",
            "description",
            "emails_disabled",
            "emails_enabled",
            "show_diff_preview_in_email",
            "mentions_disabled",
            "lfs_enabled",
            "name",
            "path",
            "public",
            "request_access_enabled",
            "share_with_group_lock",
            "visibility_level",
            "parent_id",
            "create_chat_team",
            "chat_team_name",
            "require_two_factor_authentication",
            "two_factor_grace_period",
            "enabled_git_access_protocol",
            "project_creation_level",
            "subgroup_creation_level",
            "default_branch_protection",
            "default_branch_name",
            "allow_mfa_for_subgroups",
            "resource_access_token_creation_allowed",
            "resource_access_token_notify_inherited",
            "lock_resource_access_token_notify_inherited",
            "prevent_sharing_groups_outside_hierarchy",
            "setup_for_company",
            "jobs_to_be_done",
            "crm_enabled",
            "crm_source_group_id",
            "force_pages_access_control",
            "enable_namespace_descendants_cache",
        ]
    }
}
