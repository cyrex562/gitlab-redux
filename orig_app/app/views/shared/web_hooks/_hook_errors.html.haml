- strong = { strong_start: '<strong>'.html_safe,
  strong_end: '</strong>'.html_safe }
- if hook.rate_limited?
  - placeholders = { limit: number_with_delimiter(hook.rate_limit),
    root_namespace: hook.parent.root_namespace.path }
  = render Pajamas::AlertComponent.new(title: s_('Webhooks|Webhook rate limit has been reached'),
    variant: :danger) do |c|
    - c.with_body do
      = s_("Webhooks|Webhooks for %{root_namespace} are now disabled because they've been triggered more than %{limit} times per minute. These webhooks are re-enabled automatically in the next minute.").html_safe % placeholders
- elsif hook.permanently_disabled?
  = render Pajamas::AlertComponent.new(title: s_('Webhooks|Webhook failed to connect'),
    variant: :danger) do |c|
    - c.with_body do
      = safe_format(s_('Webhooks|The webhook failed to connect and is now disabled. To re-enable the webhook, see %{strong_start}Recent events%{strong_end} for more information about the error, then test your settings.'), strong)
- elsif hook.temporarily_disabled?
  - help_link = link_to('', help_page_path('user/project/integrations/webhooks.md', anchor: 'auto-disabled-webhooks'), target: '_blank', rel: 'noopener noreferrer')
  - retry_time = { retry_time: time_interval_in_words(hook.disabled_until - Time.now) }
  = render Pajamas::AlertComponent.new(title: s_('Webhooks|Webhook fails to connect'),
    variant: :warning) do |c|
    - c.with_body do
      = safe_format(s_('Webhooks|The webhook %{help_link_start}failed to connect%{help_link_end} and is scheduled to retry in %{retry_time}. To re-enable the webhook, see %{strong_start}Recent events%{strong_end} for more information about the error, then test your settings.'), retry_time, strong, tag_pair(help_link, :help_link_start, :help_link_end))
